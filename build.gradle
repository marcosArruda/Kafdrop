buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
		//springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'docker'
apply plugin: 'org.springframework.boot'

group = 'com.homeadvisor.kafka'
version = '2.0.0'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url "http://packages.confluent.io/maven/"
	}
}

configurations {
	//compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
	compile.exclude module: 'slf4j-log4j12'
	compile.exclude module: 'jms'
	compile.exclude module: 'jmxtools'
	compile.exclude module: 'jmxri'
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	//compile('org.springframework.boot:spring-boot-starter-log4j')
	compile('org.springframework.boot:spring-boot-starter-freemarker')

	//compile("org.springframework:spring-context")
	//compile("org.springframework:spring-core")
	//compile("org.springframework:spring-beans")

	//compile("de.codecentric:spring-boot-admin-starter-client:1.4.6")
	//compile('org.springframework.boot:spring-boot-starter-thymeleaf')

	compile("commons-lang:commons-lang:2.6")

	compile("org.apache.curator:curator-recipes:2.10.0")
	compile("org.apache.curator:curator-x-discovery:2.10.0")


	compile("org.apache.zookeeper:zookeeper:3.4.8")
	compile("org.apache.kafka:kafka_2.9.2:0.8.2.2")
	compile("org.freemarker:freemarker:2.3.23")
	compile("org.springframework.retry:spring-retry:1.1.3.RELEASE")
	compile("io.springfox:springfox-swagger2:2.7.0")
	//testCompile("junit:junit:4.11")
 	testCompile("org.easymock:easymock:3.3.1")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task buildDocker(type: Docker, dependsOn: build) {      // this task will build our Docker image
	push = false
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}

		copy {
			from '../wait-for-it.sh'
			into stageDir
		}
	}
}
